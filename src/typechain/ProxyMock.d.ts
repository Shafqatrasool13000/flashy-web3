/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ProxyMockInterface extends ethers.utils.Interface {
  functions: {
    "MSG_SENDER_KEY()": FunctionFragment;
    "PERCENTAGE_BASE()": FunctionFragment;
    "POSTPROCESS_SIG()": FunctionFragment;
    "batchExec(address[],bytes32[],bytes[],uint256[])": FunctionFragment;
    "cache(bytes32)": FunctionFragment;
    "execMock(address,bytes)": FunctionFragment;
    "execs(address[],bytes32[],bytes[])": FunctionFragment;
    "feeRuleRegistry()": FunctionFragment;
    "registry()": FunctionFragment;
    "setHandlerType(uint8)": FunctionFragment;
    "setPostProcess(address,bytes4,bytes32[])": FunctionFragment;
    "stack(uint256)": FunctionFragment;
    "updateTokenMock(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MSG_SENDER_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POSTPROCESS_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchExec",
    values: [string[], BytesLike[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "cache", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "execMock",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execs",
    values: [string[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRuleRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setHandlerType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPostProcess",
    values: [string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "stack", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateTokenMock",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MSG_SENDER_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POSTPROCESS_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchExec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cache", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execMock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRuleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHandlerType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPostProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMock",
    data: BytesLike
  ): Result;

  events: {
    "ChargeFee(address,uint256)": EventFragment;
    "DeltaGas(bytes32,int256)": EventFragment;
    "GetGas(bytes32,uint256)": EventFragment;
    "LogBegin(address,bytes4,bytes)": EventFragment;
    "LogEnd(address,bytes4,bytes)": EventFragment;
    "PolygonBridged(address,address,uint256)": EventFragment;
    "RecordHandlerResult(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChargeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeltaGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBegin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolygonBridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecordHandlerResult"): EventFragment;
}

export type ChargeFeeEvent = TypedEvent<
  [string, BigNumber] & { tokenIn: string; feeAmount: BigNumber }
>;

export type DeltaGasEvent = TypedEvent<
  [string, BigNumber] & { tag: string; gas: BigNumber }
>;

export type GetGasEvent = TypedEvent<
  [string, BigNumber] & { tag: string; gas: BigNumber }
>;

export type LogBeginEvent = TypedEvent<
  [string, string, string] & {
    handler: string;
    selector: string;
    payload: string;
  }
>;

export type LogEndEvent = TypedEvent<
  [string, string, string] & {
    handler: string;
    selector: string;
    result: string;
  }
>;

export type PolygonBridgedEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    token: string;
    amount: BigNumber;
  }
>;

export type RecordHandlerResultEvent = TypedEvent<[string] & { value: string }>;

export class ProxyMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProxyMockInterface;

  functions: {
    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<[string]>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<[string]>;

    batchExec(
      tos: string[],
      configs: BytesLike[],
      datas: BytesLike[],
      ruleIndexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cache(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    execMock(
      to: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execs(
      tos: string[],
      configs: BytesLike[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRuleRegistry(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setHandlerType(
      handlerType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPostProcess(
      to: string,
      sig: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stack(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    updateTokenMock(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

  PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

  batchExec(
    tos: string[],
    configs: BytesLike[],
    datas: BytesLike[],
    ruleIndexes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  execMock(
    to: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execs(
    tos: string[],
    configs: BytesLike[],
    datas: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRuleRegistry(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setHandlerType(
    handlerType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPostProcess(
    to: string,
    sig: BytesLike,
    params: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stack(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  updateTokenMock(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

    batchExec(
      tos: string[],
      configs: BytesLike[],
      datas: BytesLike[],
      ruleIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    execMock(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    execs(
      tos: string[],
      configs: BytesLike[],
      datas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    feeRuleRegistry(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setHandlerType(
      handlerType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPostProcess(
      to: string,
      sig: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    stack(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    updateTokenMock(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChargeFee(address,uint256)"(
      tokenIn?: string | null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { tokenIn: string; feeAmount: BigNumber }
    >;

    ChargeFee(
      tokenIn?: string | null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { tokenIn: string; feeAmount: BigNumber }
    >;

    "DeltaGas(bytes32,int256)"(
      tag?: null,
      gas?: null
    ): TypedEventFilter<[string, BigNumber], { tag: string; gas: BigNumber }>;

    DeltaGas(
      tag?: null,
      gas?: null
    ): TypedEventFilter<[string, BigNumber], { tag: string; gas: BigNumber }>;

    "GetGas(bytes32,uint256)"(
      tag?: null,
      gas?: null
    ): TypedEventFilter<[string, BigNumber], { tag: string; gas: BigNumber }>;

    GetGas(
      tag?: null,
      gas?: null
    ): TypedEventFilter<[string, BigNumber], { tag: string; gas: BigNumber }>;

    "LogBegin(address,bytes4,bytes)"(
      handler?: string | null,
      selector?: BytesLike | null,
      payload?: null
    ): TypedEventFilter<
      [string, string, string],
      { handler: string; selector: string; payload: string }
    >;

    LogBegin(
      handler?: string | null,
      selector?: BytesLike | null,
      payload?: null
    ): TypedEventFilter<
      [string, string, string],
      { handler: string; selector: string; payload: string }
    >;

    "LogEnd(address,bytes4,bytes)"(
      handler?: string | null,
      selector?: BytesLike | null,
      result?: null
    ): TypedEventFilter<
      [string, string, string],
      { handler: string; selector: string; result: string }
    >;

    LogEnd(
      handler?: string | null,
      selector?: BytesLike | null,
      result?: null
    ): TypedEventFilter<
      [string, string, string],
      { handler: string; selector: string; result: string }
    >;

    "PolygonBridged(address,address,uint256)"(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; token: string; amount: BigNumber }
    >;

    PolygonBridged(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; token: string; amount: BigNumber }
    >;

    "RecordHandlerResult(bytes)"(
      value?: null
    ): TypedEventFilter<[string], { value: string }>;

    RecordHandlerResult(
      value?: null
    ): TypedEventFilter<[string], { value: string }>;
  };

  estimateGas: {
    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    batchExec(
      tos: string[],
      configs: BytesLike[],
      datas: BytesLike[],
      ruleIndexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cache(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    execMock(
      to: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execs(
      tos: string[],
      configs: BytesLike[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRuleRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setHandlerType(
      handlerType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPostProcess(
      to: string,
      sig: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stack(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateTokenMock(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchExec(
      tos: string[],
      configs: BytesLike[],
      datas: BytesLike[],
      ruleIndexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execMock(
      to: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execs(
      tos: string[],
      configs: BytesLike[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRuleRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setHandlerType(
      handlerType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPostProcess(
      to: string,
      sig: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stack(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTokenMock(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
