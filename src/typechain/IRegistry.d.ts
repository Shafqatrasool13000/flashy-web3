/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRegistryInterface extends ethers.utils.Interface {
  functions: {
    "bannedAgents(address)": FunctionFragment;
    "callers(address)": FunctionFragment;
    "fHalt()": FunctionFragment;
    "handlers(address)": FunctionFragment;
    "isValidCaller(address)": FunctionFragment;
    "isValidHandler(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bannedAgents",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "callers", values: [string]): string;
  encodeFunctionData(functionFragment: "fHalt", values?: undefined): string;
  encodeFunctionData(functionFragment: "handlers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidCaller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidHandler",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bannedAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fHalt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handlers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidHandler",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRegistryInterface;

  functions: {
    bannedAgents(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    callers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    fHalt(overrides?: CallOverrides): Promise<[boolean]>;

    handlers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    isValidCaller(
      handler: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  bannedAgents(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callers(arg0: string, overrides?: CallOverrides): Promise<string>;

  fHalt(overrides?: CallOverrides): Promise<boolean>;

  handlers(arg0: string, overrides?: CallOverrides): Promise<string>;

  isValidCaller(handler: string, overrides?: CallOverrides): Promise<boolean>;

  isValidHandler(handler: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    bannedAgents(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    callers(arg0: string, overrides?: CallOverrides): Promise<string>;

    fHalt(overrides?: CallOverrides): Promise<boolean>;

    handlers(arg0: string, overrides?: CallOverrides): Promise<string>;

    isValidCaller(handler: string, overrides?: CallOverrides): Promise<boolean>;

    isValidHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    bannedAgents(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    callers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fHalt(overrides?: CallOverrides): Promise<BigNumber>;

    handlers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isValidCaller(
      handler: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bannedAgents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fHalt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handlers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidCaller(
      handler: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
