/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Registry, RegistryInterface } from "../Registry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "agent",
        type: "address",
      },
    ],
    name: "Banned",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registration",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "info",
        type: "bytes32",
      },
    ],
    name: "CallerRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registration",
        type: "address",
      },
    ],
    name: "CallerUnregistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Halted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registration",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "info",
        type: "bytes32",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "agent",
        type: "address",
      },
    ],
    name: "Unbanned",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Unhalted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registration",
        type: "address",
      },
    ],
    name: "Unregistered",
    type: "event",
  },
  {
    inputs: [],
    name: "DEPRECATED",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "agent",
        type: "address",
      },
    ],
    name: "ban",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bannedAgents",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "callers",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fHalt",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "halt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "handlers",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "isValidCaller",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "handler",
        type: "address",
      },
    ],
    name: "isValidHandler",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registration",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "info",
        type: "bytes32",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registration",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "info",
        type: "bytes32",
      },
    ],
    name: "registerCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "agent",
        type: "address",
      },
    ],
    name: "unban",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unhalt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registration",
        type: "address",
      },
    ],
    name: "unregister",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registration",
        type: "address",
      },
    ],
    name: "unregisterCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c038061007e6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063bb1010e911610071578063bb1010e914610241578063cb3e64fd14610264578063d4c683481461026c578063ea750af61461027f578063f2fde38b1461028c57600080fd5b80638da5cb5b146101ed57806397c3ccd814610208578063afb4bfbd1461021b578063b9f145571461022e57600080fd5b806356ea919f116100e957806356ea919f146101965780635ed7ca5b146101a9578063715018a6146101b15780637bbf4a3f146101b9578063818b47a7146101d957600080fd5b80631903dcaa1461011b5780631a21c0bc1461014e5780631e7a505f1461016e5780632ec2c24614610183575b600080fd5b61013b610129366004610b37565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b61013b61015c366004610b37565b60016020526000908152604090205481565b61018161017c366004610b58565b61029f565b005b610181610191366004610b37565b6103c5565b6101816101a4366004610b58565b6104e0565b6101816105f1565b61018161066d565b61013b6101c7366004610b37565b60026020526000908152604090205481565b61013b6919195c1c9958d85d195960b21b81565b6000546040516001600160a01b039091168152602001610145565b610181610216366004610b37565b610681565b610181610229366004610b37565b610720565b61018161023c366004610b37565b61083b565b61025461024f366004610b37565b6108dc565b6040519015158152602001610145565b61018161092e565b61025461027a366004610b37565b6109aa565b6004546102549060ff1681565b61018161029a366004610b37565b6109f8565b6102a7610a71565b6001600160a01b0382166102d65760405162461bcd60e51b81526004016102cd90610ba7565b60405180910390fd5b6919195c1c9958d85d195960b21b8114156103275760405162461bcd60e51b8152602060048201526011602482015270756e7265676973746572656420696e666f60781b60448201526064016102cd565b6001600160a01b0382166000908152600160205260409020546919195c1c9958d85d195960b21b141561036c5760405162461bcd60e51b81526004016102cd90610b81565b6001600160a01b03821660008181526001602052604090819020839055517fb8142d42f05d95abf0a6570799774d59276e49ea32a04d9a4ec316ea4a6886bc906103b99084815260200190565b60405180910390a25050565b6103cd610a71565b6001600160a01b0381166103f35760405162461bcd60e51b81526004016102cd90610ba7565b6001600160a01b03811660009081526001602052604090205461044a5760405162461bcd60e51b815260206004820152600f60248201526e3737903932b3b4b9ba3930ba34b7b760891b60448201526064016102cd565b6001600160a01b0381166000908152600160205260409020546919195c1c9958d85d195960b21b141561048f5760405162461bcd60e51b81526004016102cd90610b81565b6001600160a01b0381166000818152600160205260408082206919195c1c9958d85d195960b21b9055517f75cd6de711483e11488a1cd9b66172abccb9e5c19572f92015a7880f0c8c0edc9190a250565b6104e8610a71565b6001600160a01b03821661050e5760405162461bcd60e51b81526004016102cd90610ba7565b6919195c1c9958d85d195960b21b81141561055f5760405162461bcd60e51b8152602060048201526011602482015270756e7265676973746572656420696e666f60781b60448201526064016102cd565b6001600160a01b0382166000908152600260205260409020546919195c1c9958d85d195960b21b14156105a45760405162461bcd60e51b81526004016102cd90610b81565b6001600160a01b03821660008181526002602052604090819020839055517fbcf9675eb3fde058129f75f75f8b7a48bf7bcc37ec73dfd9b45218d551ce483b906103b99084815260200190565b60045460ff161561062d5760405162461bcd60e51b815260206004820152600660248201526512185b1d195960d21b60448201526064016102cd565b610635610a71565b6004805460ff191660011790556040517f1ee9080f6b55ca44ce58681c8162e6c1ac1c47e1da791a4a1c1ec6186d8af1f390600090a1565b610675610a71565b61067f6000610acb565b565b6001600160a01b0381166000908152600360205260409020548190156106d25760405162461bcd60e51b815260206004820152600660248201526510985b9b995960d21b60448201526064016102cd565b6106da610a71565b6001600160a01b03821660008181526003602052604080822060019055517f30d1df1214d91553408ca5384ce29e10e5866af8423c628be22860e41fb810059190a25050565b610728610a71565b6001600160a01b03811661074e5760405162461bcd60e51b81526004016102cd90610ba7565b6001600160a01b0381166000908152600260205260409020546107a55760405162461bcd60e51b815260206004820152600f60248201526e3737903932b3b4b9ba3930ba34b7b760891b60448201526064016102cd565b6001600160a01b0381166000908152600260205260409020546919195c1c9958d85d195960b21b14156107ea5760405162461bcd60e51b81526004016102cd90610b81565b6001600160a01b0381166000818152600260205260408082206919195c1c9958d85d195960b21b9055517f5b357470d4ba3884887ef785883313bfabff1620ba84b4a140ddc4536cb2e0b69190a250565b6001600160a01b038116600090815260036020526040902054819061088f5760405162461bcd60e51b815260206004820152600a602482015269139bdd0818985b9b995960b21b60448201526064016102cd565b610897610a71565b6001600160a01b038216600081815260036020526040808220829055517f2ab91b53354938415bb6962c4322231cd4cb2c84930f1a4b9abbedc2fe8abe729190a25050565b6001600160a01b0381166000908152600260205260408120541580159061092857506001600160a01b0382166000908152600260205260409020546919195c1c9958d85d195960b21b14155b92915050565b60045460ff1661096d5760405162461bcd60e51b815260206004820152600a602482015269139bdd081a185b1d195960b21b60448201526064016102cd565b610975610a71565b6004805460ff191690556040517f7c46a5e7a10434913e987d799d659758880ce8e790692e13e66ddfae4cc9afca90600090a1565b6001600160a01b038116600090815260016020526040812054158015906109285750506001600160a01b03166000908152600160205260409020546919195c1c9958d85d195960b21b141590565b610a00610a71565b6001600160a01b038116610a655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102cd565b610a6e81610acb565b50565b6000546001600160a01b0316331461067f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610b3257600080fd5b919050565b600060208284031215610b48578081fd5b610b5182610b1b565b9392505050565b60008060408385031215610b6a578081fd5b610b7383610b1b565b946020939093013593505050565b6020808252600c908201526b1d5b9c9959da5cdd195c995960a21b604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b60408201526060019056fea26469706673582212200cf0d5be07881c63a95c29fc4efdd54ecab024fc6b791707e285c2e8662caafb64736f6c63430008040033";

export class Registry__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Registry> {
    return super.deploy(overrides || {}) as Promise<Registry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}
