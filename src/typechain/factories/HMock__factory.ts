/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { HMock, HMockInterface } from "../HMock";

const _abi = [
  {
    inputs: [],
    name: "MSG_SENDER_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NATIVE_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERCENTAGE_BASE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POSTPROCESS_SIG",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "cache",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "v",
        type: "uint256",
      },
    ],
    name: "drain",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "drainToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "drainTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "postProcess",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stack",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "tokenApprove",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "params",
        type: "bytes32[]",
      },
    ],
    name: "updatePostProcess",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061104e806100206000396000f3fe6080604052600436106100c25760003560e01c8063bfa2c1d21161007f578063df2ebdbb11610059578063df2ebdbb146101cd578063f5f5ba721461020d578063fa2901a514610241578063fb3f4d291461027557600080fd5b8063bfa2c1d214610192578063c2722916146101a5578063dc9031c4146101ad57600080fd5b80630f532d18146100c75780637c64d0b61461010e57806387c139431461012357806399eb59b91461013f578063aced4cae1461016c578063b184be811461017f575b600080fd5b3480156100d357600080fd5b506100fb7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a81565b6040519081526020015b60405180910390f35b61012161011c366004610de9565b610288565b005b34801561012f57600080fd5b506100fb670de0b6b3a764000081565b34801561014b57600080fd5b506100fb61015a366004610ec9565b60016020526000908152604090205481565b61012161017a366004610d53565b610294565b61012161018d366004610d2a565b6105ef565b6101216101a0366004610cef565b61063e565b610121610746565b3480156101b957600080fd5b506100fb6101c8366004610ec9565b610789565b3480156101d957600080fd5b506101f573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b039091168152602001610105565b34801561021957600080fd5b506040805180820182526005815264484d6f636b60d81b602082015290516101059190610f44565b34801561024d57600080fd5b5061025c636139148b60e11b81565b6040516001600160e01b03199091168152602001610105565b610121610283366004610cef565b6107aa565b610291816107b5565b50565b6102f16040518060400160405280600681526020016515185c99d95d60d21b815250878760008181106102d757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906102ec9190610cce565b610860565b610333604051806040016040528060058152602001642a37b5b2b760d91b815250858560008181106102d757634e487b7160e01b600052603260045260246000fd5b61038260405180604001604052806006815260200165105b5bdd5b9d60d21b8152508383600081811061037657634e487b7160e01b600052603260045260246000fd5b905060200201356108a9565b60005b858110156105e6576104268585838181106103b057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103c59190610cce565b8888848181106103e557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103fa9190610cce565b85858581811061041a57634e487b7160e01b600052603260045260246000fd5b905060200201356108ee565b86868281811061044657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061045b9190610cce565b6001600160a01b0316639d4323be86868481811061048957634e487b7160e01b600052603260045260246000fd5b905060200201602081019061049e9190610cce565b8585858181106104be57634e487b7160e01b600052603260045260246000fd5b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401600060405180830381600087803b15801561050d57600080fd5b505af1158015610521573d6000803e3d6000fd5b5050505061059785858381811061054857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061055d9190610cce565b88888481811061057d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105929190610cce565b610a58565b6105d48585838181106105ba57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105cf9190610cce565b610ba6565b806105de81610fd1565b915050610385565b50505050505050565b816001600160a01b0316639890220b826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561062a57600080fd5b505af11580156105e6573d6000803e3d6000fd5b61066b6040518060400160405280600b81526020016a546172676574737373737360a81b81525084610860565b61069660405180604001604052806009815260200168546f6b656e7373737360b81b81525083610860565b6106c160405180604001604052806009815260200168416d6f756e7473737360b81b815250826108a9565b6106cc8284836108ee565b604051634ea191df60e11b81526001600160a01b03838116600483015260248201839052841690639d4323be90604401600060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b505050506107388284610a58565b61074182610ba6565b505050565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c696420706f73742070726f6365737360601b604482015260640160405180910390fd5b6000818154811061079957600080fd5b600091825260209091200154905081565b6107418383836108ee565b80515b801561081557610803826107cd600184610fa3565b815181106107eb57634e487b7160e01b600052603260045260246000fd5b60200260200101516000610be590919063ffffffff16565b8061080d81610fba565b9150506107b8565b506000805460018101825581805290356001600160e01b0319167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091015561029160006001610bfd565b6108a58282604051602401610876929190610f57565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610c47565b5050565b6108a582826040516024016108bf929190610f81565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052610c47565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b390604401600060405180830381600087803b15801561093857600080fd5b505af1925050508015610949575060015b6107415760405163095ea7b360e01b81526001600160a01b0383811660048301526000602483015284169063095ea7b390604401602060405180830381600087803b15801561099757600080fd5b505af11580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190610ea9565b5060405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b390604401602060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190610ea9565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e9060440160206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190610ee1565b11156108a55760405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b390604401600060405180830381600087803b158015610b2b57600080fd5b505af1925050508015610b3c575060015b6108a55760405163095ea7b360e01b81526001600160a01b0382811660048301526001602483015283169063095ea7b390604401600060405180830381600087803b158015610b8a57600080fd5b505af1158015610b9e573d6000803e3d6000fd5b505050505050565b600080546001810182559080526001600160a01b0382167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091015550565b81546001810183556000928352602090922090910155565b81816002811115610c1e57634e487b7160e01b600052602160045260246000fd5b81546001810183556000928352602090922060a09190911b6001600160a01b0319169101555050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b0381168114610c7f57600080fd5b919050565b60008083601f840112610c95578081fd5b50813567ffffffffffffffff811115610cac578182fd5b6020830191508360208260051b8501011115610cc757600080fd5b9250929050565b600060208284031215610cdf578081fd5b610ce882610c68565b9392505050565b600080600060608486031215610d03578182fd5b610d0c84610c68565b9250610d1a60208501610c68565b9150604084013590509250925092565b60008060408385031215610d3c578182fd5b610d4583610c68565b946020939093013593505050565b60008060008060008060608789031215610d6b578182fd5b863567ffffffffffffffff80821115610d82578384fd5b610d8e8a838b01610c84565b90985096506020890135915080821115610da6578384fd5b610db28a838b01610c84565b90965094506040890135915080821115610dca578384fd5b50610dd789828a01610c84565b979a9699509497509295939492505050565b60006020808385031215610dfb578182fd5b823567ffffffffffffffff80821115610e12578384fd5b818501915085601f830112610e25578384fd5b813581811115610e3757610e37611002565b8060051b604051601f19603f83011681018181108582111715610e5c57610e5c611002565b604052828152858101935084860182860187018a1015610e7a578788fd5b8795505b83861015610e9c578035855260019590950194938601938601610e7e565b5098975050505050505050565b600060208284031215610eba578081fd5b81518015158114610ce8578182fd5b600060208284031215610eda578081fd5b5035919050565b600060208284031215610ef2578081fd5b5051919050565b60008151808452815b81811015610f1e57602081850181015186830182015201610f02565b81811115610f2f5782602083870101525b50601f01601f19169290920160200192915050565b602081526000610ce86020830184610ef9565b604081526000610f6a6040830185610ef9565b905060018060a01b03831660208301529392505050565b604081526000610f946040830185610ef9565b90508260208301529392505050565b600082821015610fb557610fb5610fec565b500390565b600081610fc957610fc9610fec565b506000190190565b6000600019821415610fe557610fe5610fec565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dcab1dda6b716bb76dc91a353a9d9cf7983ee98637d6bc4139e35bf55609ba1464736f6c63430008040033";

export class HMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HMock> {
    return super.deploy(overrides || {}) as Promise<HMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): HMock {
    return super.attach(address) as HMock;
  }
  connect(signer: Signer): HMock__factory {
    return super.connect(signer) as HMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HMockInterface {
    return new utils.Interface(_abi) as HMockInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): HMock {
    return new Contract(address, _abi, signerOrProvider) as HMock;
  }
}
