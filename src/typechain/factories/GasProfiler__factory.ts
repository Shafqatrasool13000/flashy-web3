/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GasProfiler, GasProfilerInterface } from "../GasProfiler";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "tag",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "gas",
        type: "int256",
      },
    ],
    name: "DeltaGas",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "tag",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "GetGas",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b506016601a565b6044565b7f37698e52cd5639897dae03c485a7870bceb6876f0e950fc063664398d5580c0c61138d5a039055565b603f8060516000396000f3fe6080604052600080fdfea2646970667358221220ca327bea7a403ac19e438b329a699b9e46a333f6b4738e8c5479afa071a1dd6564736f6c63430008040033";

export class GasProfiler__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GasProfiler> {
    return super.deploy(overrides || {}) as Promise<GasProfiler>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GasProfiler {
    return super.attach(address) as GasProfiler;
  }
  connect(signer: Signer): GasProfiler__factory {
    return super.connect(signer) as GasProfiler__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasProfilerInterface {
    return new utils.Interface(_abi) as GasProfilerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasProfiler {
    return new Contract(address, _abi, signerOrProvider) as GasProfiler;
  }
}
