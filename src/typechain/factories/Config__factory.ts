/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Config, ConfigInterface } from "../Config";

const _abi = [
  {
    inputs: [],
    name: "PERCENTAGE_BASE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POSTPROCESS_SIG",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060b38061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806387c13943146037578063fa2901a5146058575b600080fd5b6045670de0b6b3a764000081565b6040519081526020015b60405180910390f35b6065636139148b60e11b81565b6040516001600160e01b03199091168152602001604f56fea264697066735822122020ad0d3e8682d5915daa5e86fb418746fe2a151b9fa6197d4641377c7b5a496c64736f6c63430008040033";

export class Config__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Config> {
    return super.deploy(overrides || {}) as Promise<Config>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Config {
    return super.attach(address) as Config;
  }
  connect(signer: Signer): Config__factory {
    return super.connect(signer) as Config__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConfigInterface {
    return new utils.Interface(_abi) as ConfigInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Config {
    return new Contract(address, _abi, signerOrProvider) as Config;
  }
}
