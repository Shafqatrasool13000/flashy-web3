/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibFeeStorage, LibFeeStorageInterface } from "../LibFeeStorage";

const _abi = [
  {
    inputs: [],
    name: "FEE_COLLECTOR_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEE_RATE_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60d6610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c80632e2a7605146042578063b2a8094814607a575b600080fd5b60687f60d7a7cc0a45d852bd613e4f527aaa2e4b81fff918a69a2aab88b6458751d61481565b60405190815260200160405180910390f35b60687f142183525227cae0e4300fd0fc77d7f3b08ceb0fd9cb2a6c5488668fa0ea5ffa8156fea26469706673582212203feab208d89f20c76645c95384a574ae36988e9ebcd1bfdaae0ca02e219f065164736f6c63430008040033";

export class LibFeeStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibFeeStorage> {
    return super.deploy(overrides || {}) as Promise<LibFeeStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibFeeStorage {
    return super.attach(address) as LibFeeStorage;
  }
  connect(signer: Signer): LibFeeStorage__factory {
    return super.connect(signer) as LibFeeStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibFeeStorageInterface {
    return new utils.Interface(_abi) as LibFeeStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibFeeStorage {
    return new Contract(address, _abi, signerOrProvider) as LibFeeStorage;
  }
}
