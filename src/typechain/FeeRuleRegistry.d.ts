/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FeeRuleRegistryInterface extends ethers.utils.Interface {
  functions: {
    "BASE()": FunctionFragment;
    "basisFeeRate()": FunctionFragment;
    "calFeeRate(address,uint256)": FunctionFragment;
    "calFeeRateMulti(address,uint256[])": FunctionFragment;
    "calFeeRateMultiWithoutBasis(address,uint256[])": FunctionFragment;
    "calFeeRateWithoutBasis(address,uint256)": FunctionFragment;
    "counter()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerRule(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rules(uint256)": FunctionFragment;
    "setBasisFeeRate(uint256)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterRule(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "basisFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calFeeRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calFeeRateMulti",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calFeeRateMultiWithoutBasis",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calFeeRateWithoutBasis",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerRule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rules", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setBasisFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterRule",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BASE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basisFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calFeeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calFeeRateMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calFeeRateMultiWithoutBasis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calFeeRateWithoutBasis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBasisFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterRule",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RegisteredRule(uint256,address)": EventFragment;
    "SetBasisFeeRate(uint256)": EventFragment;
    "SetFeeCollector(address)": EventFragment;
    "UnregisteredRule(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredRule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBasisFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeCollector"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnregisteredRule"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RegisteredRuleEvent = TypedEvent<
  [BigNumber, string] & { index: BigNumber; rule: string }
>;

export type SetBasisFeeRateEvent = TypedEvent<
  [BigNumber] & { basisFeeRate: BigNumber }
>;

export type SetFeeCollectorEvent = TypedEvent<
  [string] & { feeCollector: string }
>;

export type UnregisteredRuleEvent = TypedEvent<
  [BigNumber] & { index: BigNumber }
>;

export class FeeRuleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeeRuleRegistryInterface;

  functions: {
    BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    basisFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    calFeeRate(
      usr_: string,
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { scaledRate: BigNumber }>;

    calFeeRateMulti(
      usr_: string,
      ruleIndexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { scaledRate: BigNumber }>;

    calFeeRateMultiWithoutBasis(
      usr_: string,
      ruleIndexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { scaledRate: BigNumber }>;

    calFeeRateWithoutBasis(
      usr_: string,
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { scaledRate: BigNumber }>;

    counter(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerRule(
      rule_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rules(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setBasisFeeRate(
      basisFeeRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      feeCollector_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterRule(
      ruleIndex_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE(overrides?: CallOverrides): Promise<BigNumber>;

  basisFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  calFeeRate(
    usr_: string,
    ruleIndex_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calFeeRateMulti(
    usr_: string,
    ruleIndexes_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calFeeRateMultiWithoutBasis(
    usr_: string,
    ruleIndexes_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calFeeRateWithoutBasis(
    usr_: string,
    ruleIndex_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  counter(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerRule(
    rule_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setBasisFeeRate(
    basisFeeRate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    feeCollector_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterRule(
    ruleIndex_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    basisFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    calFeeRate(
      usr_: string,
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calFeeRateMulti(
      usr_: string,
      ruleIndexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calFeeRateMultiWithoutBasis(
      usr_: string,
      ruleIndexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calFeeRateWithoutBasis(
      usr_: string,
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerRule(rule_: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setBasisFeeRate(
      basisFeeRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      feeCollector_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterRule(
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RegisteredRule(uint256,address)"(
      index?: null,
      rule?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; rule: string }
    >;

    RegisteredRule(
      index?: null,
      rule?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; rule: string }
    >;

    "SetBasisFeeRate(uint256)"(
      basisFeeRate?: null
    ): TypedEventFilter<[BigNumber], { basisFeeRate: BigNumber }>;

    SetBasisFeeRate(
      basisFeeRate?: null
    ): TypedEventFilter<[BigNumber], { basisFeeRate: BigNumber }>;

    "SetFeeCollector(address)"(
      feeCollector?: null
    ): TypedEventFilter<[string], { feeCollector: string }>;

    SetFeeCollector(
      feeCollector?: null
    ): TypedEventFilter<[string], { feeCollector: string }>;

    "UnregisteredRule(uint256)"(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    UnregisteredRule(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;
  };

  estimateGas: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    basisFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    calFeeRate(
      usr_: string,
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calFeeRateMulti(
      usr_: string,
      ruleIndexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calFeeRateMultiWithoutBasis(
      usr_: string,
      ruleIndexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calFeeRateWithoutBasis(
      usr_: string,
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerRule(
      rule_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rules(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setBasisFeeRate(
      basisFeeRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      feeCollector_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterRule(
      ruleIndex_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basisFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calFeeRate(
      usr_: string,
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calFeeRateMulti(
      usr_: string,
      ruleIndexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calFeeRateMultiWithoutBasis(
      usr_: string,
      ruleIndexes_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calFeeRateWithoutBasis(
      usr_: string,
      ruleIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerRule(
      rule_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBasisFeeRate(
      basisFeeRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      feeCollector_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterRule(
      ruleIndex_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
